<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xml:lang="en" xml:base="https://liuzihe02.github.io/">
    <title>Posts - Liu Zihe</title>
    
    <link href="/posts/" rel="alternate" type="text/html" title="html" />
    <link href="/posts/rss.xml" rel="alternate" type="application/rss+xml" title="rss" />
    <link href="/posts/atom.xml" rel="self" type="text/xml" title="atom" />
    <link href="/posts/feed.json" rel="alternate" type="application/feed+json" title="jsonfeed" />
    <icon>https://liuzihe02.github.io/img/red_sinc_hud2b2f992c71e0cf1b31a7194e454b3b4_2840_96x96_resize_box_3.png</icon>
    <logo>https://liuzihe02.github.io/img/red_sinc_hud2b2f992c71e0cf1b31a7194e454b3b4_2840_96x96_resize_box_3.png</logo>
    <author>
        <name>Serghei Iakovlev</name>
        <email>contact@serghei.pl</email>
    </author>
    <generator uri="https://gohugo.io" version="0.127.0">Hugo</generator>
    <updated>2025-04-03T15:00:10Z</updated>
    <id>urn:uuid:bbab65d3-19f8-5864-3991-3b189ea8b264</id>
    <entry>
        
        <category term="posts" />
        
        <link rel="alternate" type="type/html" href="https://liuzihe02.github.io/posts/dft-fft/?utm_source=atom_feed" />
        <title type="html"><![CDATA[The Discrete Fourier Transform and Fast Fourier Transform]]></title>
        
        
        
        <published>2025-03-28T17:05:08Z</published>
        <updated>2025-03-28T17:05:08Z</updated>
        <id>urn:uuid:8ae2474a-d471-5d23-1921-3ac30bad0906</id>
        
        <summary type="html"><![CDATA[We analyze 1 the theoretical properties of both the Discrete Fourier Transform (DFT) and the optimized Fast Fourier Transform (FFT), and estimate their algorithmic complexity.
All code available on Github. Slides available here.
Discrete Fourier Transform Theory The DFT converts a finite-length time-domain signal into its frequency-domain representation. For an input signal $x[n]$ of length $N$, where $0 \le n \le N-1$, the DFT is defined as:
$$ X[k] = \sum_{n=0}^{N-1} x[n]\, W_N^{kn}, \quad 0 \le k \le N-1 \label{eq:DFT} $$ where $W_N=e^{-j\frac{2\pi}{N}}$ is the $N$-th principal root of unity, and $X[k]$ is component at frequency $kf_s/N$ with sampling frequency $f_s$.]]></summary>
    </entry>
    <entry>
        
        <category term="posts" />
        
        <link rel="alternate" type="type/html" href="https://liuzihe02.github.io/posts/r1/?utm_source=atom_feed" />
        <title type="html"><![CDATA[Breaking Down DeepSeek R1]]></title>
        
        
        
        <published>2025-02-17T17:05:08Z</published>
        <updated>2025-02-17T17:05:08Z</updated>
        <id>urn:uuid:22874317-628e-5906-99f5-28bf7a487dee</id>
        
        <summary type="html"><![CDATA[In this post, I want to explore the key RL architecture and software optimizations DeepSeek made to create Deepseek-R1. I&rsquo;ll provide a brief introduction to the RL setup and explain how GRPO makes traditional algorithims much more efficient. At the end, I&rsquo;ll provide a brief overview of how DeepSeek-R1 was trained. Talk given at Cambridge AI Safety Hub Members Meeting in February, slides available here.
Preliminaries Transformers Illustration of autoregressive model of transformers, taken from the ARENA curriculum Modern transformers are autoregressive models.]]></summary>
    </entry>
    <entry>
        
        <category term="posts" />
        
        <link rel="alternate" type="type/html" href="https://liuzihe02.github.io/posts/mcts/?utm_source=atom_feed" />
        <title type="html"><![CDATA[Breaking Down Monte Carlo Tree Search]]></title>
        
        
        
        <published>2024-12-07T17:05:08Z</published>
        <updated>2024-12-07T17:05:08Z</updated>
        <id>urn:uuid:d202cb86-f47f-5559-5947-0043b755b246</id>
        
        <summary type="html"><![CDATA[We explain how Monte Carlo Tree Search works and introduce its pseudocode. We borrow notes and figures from int8&rsquo;s website and the MCTS Wikipedia page. I wrote a lightweight implementation for tic-tac-toe available here and a super lightweight implementation available here.
Game Representation A game tree is a tree data structure, where every node represents a distinct state of the game. Given a state $s$, we take an action $a$, and the environment transitions to the new state $s'$ with the transition probability $p_a(s'|s)$.]]></summary>
    </entry>
</feed>
